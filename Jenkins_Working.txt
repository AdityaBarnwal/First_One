Jenkins Working :
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* Jenkins works on default port 8080.
  - vim /etc/sysconfig/jenkins		#### all jenkins configuration is listed here. Even ports of jenkins can be changed from here.

Manage Jenkins :
-> Configure Jenkins
-> Configure Global Security
-> Manage Plugins
-> Manage Nodes

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* Enabling security for the first time :
++++++++++++++++++++++++++++++++++++++++
  -> Go to "Configure Global Security", click on "Enable Security".
  -> Under "Access Control", click on "Jenkin's own user database" and select "Allow users to sign up"
     If we do nt check "Allow users to sign up" and save the "Configure Global Security", the Jenkins will go into security mode.
	 And the current session will get end asking to sign up freshly and we will be left with no users to signin.
	 So, for allowing to signin for the first time, we select "Allow users to sign up" for first user and disable it later.
  -> Under "Authorization", click on "Logged-in users can do anything" and finally click on "Save" & "Apply"
  -> Jenkins goes to Sign-in page. As, we do not have any user, create one now and we can do everything with the new user.
  -> Now, disable the "Allow users to sign up" in "Configure Global Security"
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* By default Jenkins is present in "/var/lib/jenkins/"  and important folder in jenkins are below :
  job	  - where all of our jobs exists
  nodes   - where all of our slave nodes configurations are kept
  plugins - where all of our plugins exists (most of them wil be in .jpi format)
  .ssh	  - where all authenticated keys exists [su jenkins -> ssh keygen (ssh key got generated for user 'jenkins')]
  userContent - Has files/folders that can be shared over http. Whatevere we drop in here, gets available in browser. Type "192.168.31.175:userContent/"
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* For creating a new job, click on "New Item" and select anyone among four from the list.

* For "Freestyle project", important points :
  - "Name" - game-of-life-packaging
  - "Discard Old Builds" - For deciding the interval after which old builds should get deleted.
  - "This build is parameterized" -> Add Parameter -> String Parameter - Asks for inputs before starting the build job.
  - "Source Code Management" -> Git -> For syncing Git will the job.
    Repository URL 	  : https://github.com/wakeleo/game-of-life.github
	Credentials	   	  : None
	Branches to build : */master
	
* Build Triggers -> Poll SCM - Instructs job to start build as soon as any commit is done in Git repository.
  Schedule : *****
  
* Build -> Invoke top-level Maven targets -> Goals -> clean package
  Here, we gave the build steps
  
* Execute shell -> Commands - We give linux commands over here.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Dynamic build based upon parameters :
+++++++++++++++++++++++++++++++++++++
The requirement is, if our shell command is supposed to vary based on few parameters, then we do not have to run different jobs for each one of them.
Execute shell -> Commands : rsync ./* someuser@UAT1:/tmp
							rsync ./* someuser@UAT2:/tmp
							rsync ./* someuser@UAT3:/tmp
		  
We can set a variable like : rsync ./* someuser@$deploy_server:/tmp which can be passed as a parameter into "This build is parameterized" as below :
(*) This build is parameterized
	String Parameter
	Name 		  : deploy_server		#### without '$'
	Default Value : UAT1
	Description	  :
  
-> Apply and save it.
-> Now, in game-of-life-packaging project dashboard, "Build" will get replaced by "Build with Parameters" at left hand side.
-> Click on "Build with Parameters" at left hand side and clicking on it will ask for "deploy_server" input and the build happens accordingly.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Configuring slave nodes in master :
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* ip a														#### In Slave node, slave ip address 192.168.32.155. Make a note of ip address.
* useradd -d /var/lib/jenkins/ -m -s /bin/bash jenkins 		#### Create user "jenkins" in slave node. Description of command is below :
  -d /var/lib/jenkins/	#### directory "/var/lib/jenkins/" will be used for setting up of all the slave files
  -s /bin/bash jenkins	#### user "jenkins" will be given the shell "/bin/bash"
* passwd jenkins		#### setting password of jenkins "redhat"
  
* Come to "Manage Jenkins" -> "Manage Nodes" (master node will already be shown as added) -> click on "New Node" on present left side -> 
  Give the name of node and check (*) "Dumb Slave" -> Fill the balnks as below :
  Name 					: Adi_Slave
  # of executers 		: 1 
  Remote root directory : /var/lib/jenkins/
  Labels				: unix-salve
  Usage					: Utilize this node as much as possible
  Launch method			: Launch slave agents on Unix machines via ssh
						Host 		: 192.168.32.155		#### ip address of slave
						Credentials : "Click on Add" button
									Username : jenkins
									Password : redhat
									Click on "Add"
						Credentials : "jenkins/******"		#### Box will get popped up with user jenkins and its password
* Click on "Save" button.
* Click on "Adi_Slave" and then click on "Relaunch slave agent"

* If we want a job to run on a particular node, we need to follow below steps :
  -> Come to job "Project game-of-life-packaging" -> Configure (present on left column) -> Check on "Restrict where this project can be run" ->
  -> Select on "Adi_Slave" from the drop down -> Clcik on Apply and Save.
  Next time, the job will run on slave machine.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

