From Java Home Cloud :
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Jenkins Installation and Configuration :
---------------------------------------
* Go to "https://jenkins.io/download/" and under LTS click on "Red Hat/Fedora/CentOS".
* This version requires "Java 1.8", so we need to install Java 1.8.
* java -version							#### Java version "1.7.0_171", but we need Java 1.8
* yum list | grep java-1.8				#### Checking the available packages of java-1.8
* yum install java-1.8.0-openjdk-devel -y
* java -version							#### Java version still pointing to "1.7", but we need Java 1.8
* update-alternatives --config java		#### from listed options, select java with version "1.8"
* java -version							#### Java version now pointing to "1.8".
* wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
* rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
* service jenkins start					#### starting jenkins server on port 8080
* Go to browser, give IP_Address:8080	#### Jenkins page opens
* Copy the password from shown address	#### /var/lib/jenkins/secrets/initialAdminPassword
* Click on "Continue" and "Install suggested plugins"
* After installations gets over for plugins, it asks to "Create First Admin User", give the details and click on "Save and Finish".
  DO NOT click on "Continue as admin", above admin user will not be created.
* Now, Jenkins is ready, we can click on "Start using Jenkins".
* chkconfig jenkins on 					#### start jenkins automatically, when the system is up/reboots every time.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Installation of Apache Maven and Git :
-----------------------------------------
Step 1 :
* cd /opt
* wget http://www-us.apache.org/dist/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.zip
* unzip apache-maven-3.5.3-bin.zip								#### apache-maven-3.5.3 will be present now.
* rm -rf apache-maven-3.5.3-bin.zip

Step 2 :
Maven command will be present inside "apache-maven-3.5.3/bin/mvn". We have to set a permanent path to this command.
* vi ~/.bashrc
  export M2_HOME=opt/apache-maven-3.5.3							#### needs to change as per our path (/opt/apache-maven-3.5.4)
  export M2=$M2_HOME/bin
  export PATH=$M2:$PATH
* source ~/.bashrc												#### reloading the source
* mvn --version 												#### shows 3.5.3
---------------------------------------------------------------------------------------------------------------------------------------------
OR, as per maven site :																														|
export M2_HOME=/usr/local/apache-maven/apache-maven-3.0.x		#### Add the M2_HOME environment variable from this command					|
export M2=$M2_HOME/bin											#### Add the M2 environment variable from this command						|
export PATH=$M2:$PATH											#### Add the M2 environment variable to your path from this command:		|
---------------------------------------------------------------------------------------------------------------------------------------------																																			

Step 3 :
* yum install git -y											#### installs git
	
Step 4 :
* Make sure that JAVA_HOME is set to the location of your JDK. For example: export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk.x86_64
* Make sure that $JAVA_HOME/bin is in your PATH environment variable.
   Example : export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk.x86_64
   
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Jenkins freestyle projects, maven and Git :
-------------------------------------------
* Click on "Create new jobs" and give a name to the project "my-app" and click on "Freestyle project"
* Select "Git" under "Source code management", give the "Repositories URL" : https://github.com/javahometech/my-app (It has "src" and "pom.xml")
* Branch to build will be "*/master" in this case.
* Come to "Build" paragraph and click on "Add build step" and select "Invoke top-level Maven targets"
* Under "Goals" write "clean package" [Note : Do not mention "mvn" as Jenkins automatically picks mvn keyword]
* Finally, click on "Save" and click on "Build Now" on left side column and the build will start.

Issue 1:
We see that the build got failed with error "mvn clean package command execution failed... No such file or directory". Lets fix this :
Reason is, we added the path of maven for other user. 
In jenkins, jenkins runs all commands as "jenkins" user and in "jenkins" user profile, this maven path is not available.
So, we will configure maven path location in "jenkins" user as well. Steps are below :
* Come to jenkins home and click on "Manage Jenkins" and "Global Tool Configuration" under which we can specify the location of Maven.
* Come to "Maven" paragraph and click on "Add Maven", present beside of "Maven installations" tag.
  Name 		 : maven-3					#### Give some meaningful name 
  Uncheck "Install automatically" box
  Maven_HOME : /opt/apache-maven-3.5.3	#### We already set this earlier.
  
* Click on "Save" and now, we added the location of maven. So, jenkins can pick maven and can use maven commands for execution of jobs.
* Come to the "my-app" job, right click and click on "Configure".
* Come to "Build" paragraph and give below inputs :
  Maven Version : maven-3 				#### the one which we configured in "Global Tool Configuration" appears here. Select it.
  Goals 		: clean package
  
* Click on "Save".
  Based on above inputs, jenkins can locate the maven home directory and it automatically locates "mvn" command under that build.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Jenkins Pipelines :
-------------------
* Declarative pipelines
  Code is simpler in Groovy syntax and is written locally in a file and is checked into a SCM (Git)
  The code is defined within a "pipeline" block. Example :
  pipeline {
  .
  }
* Scripted pipelines
  Code is written in traditional way and uses stricter Groovy syntax. The code is written in Jenkins UI instance.
  The code is defined within a "node" block. Example :
  node {
  .
  }

Jenkins integration with Git and Maven :
----------------------------------------
* Open Jenkins -> New Item -> Enter the name of project "jenkinsfile-git-and-maven" -> Pipeline -> Under "Pipeline" tab, we could see :
  Definition : Pipeline script from SCM. We need to select following options :
				SCM : Git
				Repositories 	     : 
							 Repository URL : "https://github.com/javahometech/my-app" (Git URL where our Jenkinsfile exists) 
							 Credentials 	: Give credentials if required
				Branches to build     : 
							 Branches to build : */master
				Repository browser   : (Auto)
				Script Path 	     : Jenkinsfile
				Lightweight checkout : (*)
  Click on "Save" button and click on "Build" button at left of the jenkins column.

[NOTE : "Pipeline syntax" can be used to generate the required syntax]  

-> Jenkinsfile in Git repository : Requirement is, Stage1 (Git checkout) and Stage2 (Compiling, testing and packaging the code) :
---------------------------------------------------------------------------------------------------------------------------------
node{
    stage('Git checkout'){
      git 'https://github.com/javahometech/my-app'
	}
	stage('Compile-Package'){
	  sh 'mvn package'
	}
}

-> Result after executing the build with above Jenkinsfile : "mvn : command not found"

-> Fixing above Jenkinsfile :
-----------------------------
- Click on "Pipeline syntax" under "Pipeline" tab and give following details :
  Sample Step : tool: Use a tool from a predefined Tool Installation
  Tool Type   : Maven
  Tool 		  : maven-3 
			   (We, previously configured Maven with name "maven-3" in "Global Tool Configuration" and specified the name of path as "maven-3".
			    Hence, "maven-3" is appearing from scroll button.)

- Click on "Generate Pipeline Script" and following code will get generated : tool name: 'maven-3', type: 'maven'
- Copy the generated script and come to Jenkinsfile in Git and paste it like below :
node{
    stage('Git checkout'){
      git 'https://github.com/javahometech/my-app'
	}
	stage('Compile-Package'){
	  def mvnHome = tool name: 'maven-3', type: 'maven'		
	  // tool name: 'maven-3', type: 'maven' ----> this piece of code give us the maven home directory 
	  // and returns maven home directory where maven is installed. "mvnHome" can be any variable name.
	  sh "${mvnHome}/bin/mvn package"
	}
}

- Commit changes of Jenkinsfile In Git and build the Job again in Jenkins and "Console Output' shows "Finished: success"
------------------------------------------------------------------------------------------------------------------------------------------------- 
							 
* Open Jenkins -> New Item -> Enter the name of project "jenkinsfile-git-and-maven" -> Pipeline -> Under "Pipeline" tab, we could see :
  Definition : Pipeline script 			(Need to write the above Jenkinsfile in Jenkins UI itself in "Script" block)
  Click on "Save" button and click on "Build" button at left of the jenkins column.
  
Chapter 08 completed
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++