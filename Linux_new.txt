* cat /etc/shells	
  /bin/sh
  /bin/dash
  /bin/bash
  /bin/rbash
* echo $BASH			#### /usr/bin/bash
* echo $BASH_VERSION	#### 4.3.11(1)-release
=========================================================================================================
Shell program :
---------------------------------------------------------------------------------------------------------
* s1.sh
#!/bin/bash
echo "Enter names : "
read name1 name2 name3
echo "Names : $name1 , $name2 , $name3"

./s1.sh
---------------------------------------------------------------------------------------------------------
* s1.sh
#!/bin/bash
read -p  'username : ' user_var
read -sp 'password : ' pass_var
echo
echo "username : $user_var"
echo "password : $pass_var"
---------------------------------------------------------------------------------------------------------
* s1.sh
#!/bin/bash
echo "Enter names : "
read -a names
echo "Names : ${names[0]}, ${names[1]}, ${names[3]}"

I/p : adi swas abhi shanu
O/p : adi swas shanu
---------------------------------------------------------------------------------------------------------
* s1.sh
#!/bin/bash
echo "Enter name : "
read
echo "Name : $REPLY"
I/p : adi
O/p : adi
---------------------------------------------------------------------------------------------------------
* s1.sh
#!/bin/bash
echo $0 $1 $2 $3 "> echo $1 $2 $3"
args=("$@")								#### $@ stores all passed arguments in a array
echo ${args[0]} ${args[1]} ${args[2]}
echo $@									#### I/p : mark tom john,, O/p : s1.sh mark tom john
echo $#									#### $# counts the number of passed arguments
I/p : ./s1.sh mark tom john
O/p : s1.sh mark tom john > echo $1 $2 $3
	  mark tom john
	  mark tom john
	  3
---------------------------------------------------------------------------------------------------------
* s1.sh
#!/bin/bash
count=10
if [ $count -eq 10 ]					#### if (($count -eq 10))
then 
  echo "condition is true"
elif [ $count -----]
then
  echo "given some other condition"
else 
  echo "condition is false"
fi
---------------------------------------------------------------------------------------------------------
Integer comparison :
********************
-eq : if [ "$a" -eq "$b" ]				#### same for -ne, -gt, -ge, -lt, -le
<	: if (("$a" < "$b"))				#### same for <=, >, >= 

String comparison :
*******************
=   : if [ "$a" = "$b" ]				#### same for ==, !=
<	: if [[ "$a" < "$b" ]]				#### same >
-z  : if string is null

File test operator :
********************
* if [ -e $file_name]					#### true if file exists, false if file is absent
* if [ -d $dire_name]					#### true if directory exists, false if directory is absent
* if [ -s $file_name]					#### true if it has records, false if it is empty
* if [ -w $file_name]					#### true if it is write able, false if it is non write able

Logical operator :
********************
* if [ "$age" -gt 18 ] && [ "$age" -lt 30 ]
* if [[ "$age" -gt 18 && "$age" -lt 30 ]]
* if [ "$age" -gt 18 -a "$age" -lt 30 ]
* if [ "$age" -gt 18 ] || [ "$age" -lt 30 ]
* if [[ "$age" -gt 18 || "$age" -lt 30 ]]
* if [ "$age" -gt 18 -o "$age" -lt 30 ]
---------------------------------------------------------------------------------------------------------
* s1.sh
#!/bin/bash
if [ -z $1 ]
then echo "null"
else echo "not null"
fi

I/p : ./s1.sh 
O/p : null

I/p : ./s1.sh da
O/p : not null
---------------------------------------------------------------------------------------------------------
* s1.sh
#!/bin/bash
num1=20
num2=5
num3=20.5
echo $(( num1 + num2 ))					#### 25
echo $(( num1 - num2 ))					#### 15
echo $(( num1 * num2 ))					#### 100
echo $(( num1 / num2 ))					#### 4
echo $(( num1 % num2 ))					#### 0

echo $(expr $num1 + $num2 )				#### 25
echo $(expr $num1 - $num2 )				#### 15
echo $(expr $num1 * $num2 )				#### expr: syntax error
echo $(expr $num1 \* $num2 )			#### 100
echo $(expr $num1 / $num2 )				#### 4
echo $(expr $num1 % $num2 )				#### 0

echo "20.5+5" | bc						#### 25.5
echo "20.5-5" | bc						#### 15.5
echo "20.5*5" | bc						#### 102.5
echo "20.5/5" | bc						#### 4 (incorrect)
echo "scale=2;20.5/5" | bc				#### 4.10 (correct), scale=2 means up to two place of decimal
echo "20.5%5" | bc						#### .5

echo "$num3+$num2" | bc					#### 25.5
echo "$num3-$num2" | bc					#### 15.5
echo "$num3*$num2" | bc					#### 102.5
echo "$num3/$num2" | bc					#### 4 (incorrect)
echo "scale=2;$num3/$num2" | bc			#### 4.10 (correct), scale=2 means up to two place of decimal
echo "$num3%$num2" | bc					#### .5

echo "scale=2;sqrt($num)" | bc -l		#### will find the square root of num, "-l" is for invoking maths library
echo "scale=2;$num^3)" | bc -l			#### will find the value of numto the power of 3, "-l" is for invoking maths library
---------------------------------------------------------------------------------------------------------
* s1.sh
#!/bin/bash

vehicle=$1
case $vehicle in
  "car" )
    echo "a car" ;;
  "van" )
    echo "a van" ;;
  * )
    echo "unknown"
esac
--------------------------------------
$LANG=C		#### setting LANG variable encoding
* s1.sh
#!/bin/bash

echo -e "Enter character : \c"
read value
case $value in
  [a-z] )
    echo "It is a-z" ;;
  [A-Z] )
    echo "It is A-Z" ;;
  [0-9] )	
    echo "It is 0-9" ;;
  ? )
    echo "special character" ;;
  * )
    echo "unknown" ;;
esac
---------------------------------------------------------------------------------------------------------

* s1.sh
#!/bin/bash
os=('ab' 'bc' 'cd')
os[6]='de'
echo "${os[1]}"					#### bc
echo "${os[@]}"					#### ab bc cd de
echo "${!os[@]}"				#### 0 1 2 6
echo "${#os[@]}"				#### 4
unset os[2]
echo "${!os[@]}"				#### 0 1 6
echo "${#os[@]}"				#### 3

string1=abcd					#### variable name is always an array with 1 element
echo "${string[@]}"				#### abcd
echo "${string[0]}"				#### abcd
echo "${string[1]}"				#### nothing
echo "${#string[@]}"				#### 1
---------------------------------------------------------------------------------------------------------
* s1.sh
#!/bin/bash
n=1
while [ $n -le 3 ]				#### while (( $n <= 3 ))
do
  echo "$n"
  n=$(( n+1 ))					#### (( n++ ))
  sleep 1						#### sleep for 1 second
  gnome-terminal &				#### xterm & #### opens a new terminal at background
done
-------------------------
#!/bin/bash
n=1
until [ $n -ge 10 ]				#### while (( $n >= 10 ))
do
  echo "$n"						#### 1-9
  n=$(( n+1 ))					#### (( n++ ))
done
-------------------------
#!/bin/bash
for var1 in 1 2 3 4 5
do
  echo $var1
done
-------------------------
#!/bin/bash
for var1 in {1..10}				#### 1 is start, 10 is end
do
  echo $var1
done
-------------------------
#!/bin/bash
for var1 in {1..10..2}			#### 1 is start, 10 is end, 2 is increment value
do
  echo $var1
done
-------------------------
#!/bin/bash
for (( var1=0; var1<5; i++ ))
do
  echo $var1
done
-------------------------
#!/bin/bash					#### use of 'break' 
for (( var1=0; var1<10; i++ ))
do
  if [ $var1 -gt 5 ]
  then
    break
  fi
  echo $var1
done

O/p : 1 2 3 4
-------------------------
#!/bin/bash					#### use of 'continue', if 'continue' is met, all statements under it will be skipped and the loop starts again
for (( var1=0; var1<10; i++ ))
do
  if [ $var1 -eq 3 -o $var1 -eq 6 ]
  then
    continue
  fi
  echo $var1
done

O/p : 1 2 4 5 7 8 9
-------------------------
#!/bin/bash
for command in ls pwd date
do
  echo "**** $command ****"
  echo $command
done
-------------------------
#!/bin/bash					#### listing out directories in current folder
for item in *
do
  if [ -d $item ]			#### if [ -e $item ] checking files in current folder
  then
    echo $item
  fi
done
-------------------------
#!/bin/bash
select name in mak jon tom ben
do
  echo "$name selected"
done

O/p : 
1) mak
2) jon
3) tom
4) ben
#? 2
john selected
-------------------------
#!/bin/bash
select name in mak jon tom ben
do
  case $name in
  mak )
    echo "mak selected" ;;
  jon )
    echo "jon selected" ;;
  tom )
    echo "tom selected" ;;
  ben )
    echo "ben selected" ;;
  * )
    echo "enter option from 1 to 4"
done
---------------------------------------------------------------------------------------------------------
#!/bin/bash
echo "give file name"
read file_name
while read var1
do
  echo $var1
done < $file_name
-------------------------
#!/bin/bash
cat Dockerfile | while read var1
do
  echo $var1
done
-------------------------
#!/bin/bash
echo "give file name"
read file_name
while IFS=' 'read -r var1		#### '-r' prevents '/' from being interpreted
do
  echo $var1
done < $file_name