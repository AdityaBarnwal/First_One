Installing docker-compose :
---------------------------
$ yum install curl -y
$ curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
$ chmod +x /usr/local/bin/docker-compose
$ docker-compose --version				#### docker-compose version 1.18.0, build 8dd22a9

OR

$ pip install docker-compose
$ docker-compose version
  docker-compose version 1.7.1, build 0a9ab35
===================================================================================================================================================  
* Docker Compose : example 1
  Docker compose is used to run multi-container applications. 
  Each container will run a stand-alone application and it can communicate with other containers present in same host.
  Example : MEAN Stack Application (M - MongoDB, E - ExpressJS, A - Angular and N - NodeJS)
  
* Docker architecture examle :
  We need 3 docker containers to spun from their respective images to build MEAN application.
  Each of these 3 containers will be built from their respective docker files seperately and all 3 docker files will be called from a docker compose file.
  Docker file is written in YAML (Yet Another Markup Language). Here, we mention following points :
  -> We specify the locations where our each of docker file is present.
  -> We specify the port number which a container needs to use to interact with ther container.
  -> If we have database, we may have to specify the link of the database, so that our servers and database can get connected.
					   ----> Docker File1 ----> Container1 for MongoDB database 						----> 
   Docker Compose File ----> Docker File2 ----> Container2 for ExpressJS and NodeJS for backend servers ----> MEAN
					   ----> Docker File3 ----> Container3 for Angular for front end client 			----> 

* docker-compose.yml :
----------------------
version: '3.0'				# specify docker-compose version
# Define the services/containers to be run
services:					# "services" is a key-word here
  angular: 					# name of the first service
    build: angular-app  	# specify the directory of the Dockerfile where our angular-app coding resides
	ports:
	  - "4200:4200" 		# specify port mapping, left "4200" is for host and right "4200" on docker where application will be running
	  
  express: 					# name of the second service
    build: express-server 	# specify the directory of the Dockerfile where our express-server coding resides
	ports:
	  - "3000:3000" 		# specify port mapping, left "3000" is for host and right "3000" on docker where application will be running
	links:
	  - database 			# link this service to the database service
	
  database: 				# name of the third service
    image: mongo 			# specify image to build container from
	ports:
	  - "27017:27017" 		# specify port forwarding, left "27017" is for host and right "27017" on docker where application will be running

* Content of angular-app folder "e2e, node_modules, src, Dockerfile, karma.conf.js, package.json, protractor.conf.js, README.md, tsconfig.json, tslint.json" 
  Content of "Dockerfile" in "angular-app" folder :
---------------------------------------------------
FROM node:6						# pulling node, version 6 image
RUN mkdir -p /usr/src/app		# inside node6 image, we are creating a new directory /usr/src/app
WORKDIR /usr/src/app			# chnging the working directory to /usr/src/app in node6 image
COPY package.json /usr/src/app	# Copying all project code from host to image directory /usr/src/app
RUN npm cache clean				# removing cache of npm (Node Package Manager)
RUN npm install					# it looks for package.json file and whatever version of dependencies are mentioned inside, will get downloaded
								  and will be present in a new folder "node_modules" and that will be moved to path "/usr/src/app" of image.
COPY . usr/src/app				# after downloading the dependencies, we are copying everything from host to docker image.
EXPOSE 4200						# this image will open 4200 port.
CMD ["npm", "start"]			# we are starting a npm which will look for our code which is present in src folder.

* Content of express-server folder "models, routes, app.js, Dockerfile, package.json" 
  Content of "Dockerfile" in express-server folder :
----------------------------------------------------
FROM node:6						# pulling node, version 6 image
RUN mkdir -p /usr/src/app		# inside node6 image, we are creating a new directory /usr/src/app
WORKDIR /usr/src/app			# chnging the working directory to /usr/src/app in node6 image
COPY package.json /usr/src/app	# Copying all project code from host to image directory /usr/src/app
RUN npm cache clean				# removing cache of npm (Node Package Manager)
RUN npm install					# it looks for package.json file and whatever version of dependencies are mentioned inside, will get downloaded
								  and will be present in a new folder "node_modules" and that will be moved to path "/usr/src/app" of image.
COPY . usr/src/app				# after downloading the dependencies, we are copying everything from host to docker image.
EXPOSE 3000						# this image will open 3000 port.
CMD ["npm", "start"]			# we are starting a npm which will look for our code which is present in src folder.


* cd MEAN-Stack-App/
* ls 				# angular-app, docker-compose.yml, docker-compose.yml~, express-server, npm-debug.log
* docker-compose up
* go to browser and type "localhost:4200" (front-end/ client) and the application would open
* go to browser and type "localhost:3000" (back-end/ server) and "foobar" will be displayed
* go to browser and type "localhost:27017" (database) and "It looks like you are .... driver port" will be displayed
* give inputs to "localhost:4200" (front-end/ client), then the input should be saved inside a database.
  So, to verify that, go to browser and type "localhost:3000/api/contacts" and it will show the data which we saved earlier.

===================================================================================================================================================
https://docs.docker.com/v17.09/compose/wordpress/#bring-up-wordpress-in-a-web-browser
* docker-compose : example 2
  - mkdir my_wordpress
  - vim docker-compose.yml
++++++++++++++++++++++++++++++++++++++++++++++++++
version: '3'									 +
												 +
services:										 +
   db:											 +
     image: mysql:5.7							 +
     volumes:									 +
       - db_data:/var/lib/mysql					 +
     restart: always							 +
     environment:								 +
       MYSQL_ROOT_PASSWORD: somewordpress		 +
       MYSQL_DATABASE: wordpress				 +
       MYSQL_USER: wordpress					 +
       MYSQL_PASSWORD: wordpress				 +
												 +
   wordpress:									 +
     depends_on:								 +
       - db										 +
     image: wordpress:latest					 +
     ports:										 +
       - "8000:80"								 +
     restart: always							 +
     environment:								 +
       WORDPRESS_DB_HOST: db:3306				 +
       WORDPRESS_DB_USER: wordpress				 +
       WORDPRESS_DB_PASSWORD: wordpress			 +
volumes:										 +
    db_data:  									 +
++++++++++++++++++++++++++++++++++++++++++++++++++
  - docker-compose up -d						 #### open browser and go to port 8000, application will be running there
  - docker network ls 							 #### f71b82d7f530(NETWORK ID)  mywordpress_default(NMAE)  bridge(DRIVER)  local(SCOPE)

===================================================================================================================================================  
* docker-compose : example 3
docker-compose.yml
------------------
version: "2"
services:
  es:
    image: elasticsearch				---- we refer to the elasticsearch image available on the Docker Hub.
  web:
    image: prakhar1989/foodtrucks-web	---- we refer to the image that we built at beginning of this section.
    command: python app.py
    ports:
      - "5000:5000"
    volumes:				---- specifies a mount point in our web container where the code will reside. Optional but useful, if access to logs etc is needed. 
      - .:/code

$ docker stop $(docker ps -q)	---- Before starting, make sure that related ports are free. So, if the Flask and ES containers running, lets turn them off.
  39a2f5df14ef
  2a1b77e066e6

$ docker-compose up			---- Navigate to the food trucks directory and then run docker-compose up. Running the container in attached mode.
Ctrl + C 					---- For quitting the running instance

$ docker-compose up -d		---- Re-running the container in detached mode.
$ docker-compose ps
      Name                    Command               State           Ports
  ----------------------------------------------------------------------------------
  foodtrucks_es_1    /docker-entrypoint.sh elas ...   Up      9200/tcp, 9300/tcp
  foodtrucks_web_1   python app.py                    Up      0.0.0.0:5000->5000/tcp

$ docker-compose stop			---- For stopping the services from running. 
$ docker network rm foodtrucks	---- For removing the previous created network 'foodtrucks'.
$ docker-compose up -d			---- Rerun the docker-compose again to see if any network has been created by docker-compose.
$ docker network ls				---- Yes, it is there 'foodtrucks_default'.
  NETWORK ID          NAME                 DRIVER
  0c8b474a9241        bridge               bridge              
  293a141faac3        foodtrucks_default   bridge              
  b44db703cd69        host                 host                
  0474c9517805        none                 null

Compose created a new network 'foodtrucks_default' and attached both the new services in that network, so that each of these are discoverable to the other. 
Each container for a service joins the default network and is both reachable by other containers on that network, and discoverable by them at a hostname identical to the container name. 


---------------------
Docker Compose (2) :|
---------------------
docker-compose.yml :|
---------------------
mysql:
  image: mysql:5.7
  ports:
    - "3306"

$ docker-compose ps                                                    
  Name                     Command               State            Ports
-------------------------------------------------------------------------------------
  mysql_1       docker-entrypoint.sh mysqld      Up      0.0.0.0:32769->3306/tcp

===================================================================================================================================================  