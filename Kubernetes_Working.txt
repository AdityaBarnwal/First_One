https://www.mirantis.com/blog/introduction-to-yaml-creating-a-kubernetes-deployment/

Kubernetes Working :
++++++++++++++++++++
YAML is a superset of JSON, which means that any valid JSON file is also a valid YAML file. 
So on the one hand, if you know JSON and you’re only ever going to write your own YAML (as opposed to reading other people’s) you’re all set.

Kubernetes Vocabs :
++++++++++++++++++++
* Node 
  - Kubelet
  - Communicates with master
  - Runs pods
* Pod
  - Runs 1+ containers
  - Exists on a node
* Service
  - Handles requests
  - Usually a load balancer
* Deployment
  - Defines desired state - kubernetes handle the rest



There are only two types of structures you need to know about in YAML :
* Lists
* Maps

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
YAML Maps :
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Maps let you associate name-value pairs, which is convenient while setting up configuration information. 
Example, you may have a config file that starts like this:
************************************************
---
apiVersion: v1
kind: Pod
************************************************
The first line is a separator, and is optional unless you’re trying to define multiple structures in a single file. 
From there, we have 2 values, v1 and Pod, mapped to keys, apiVersion and kind. This is simple, and you can think of it in terms of its JSON equivalent:
************************************************
{
   "apiVersion": "v1",
   "kind": "Pod"
}
************************************************
Notice that in our YAML version, the quotation marks are optional; the processor can tell that you’re looking at a string based on the formatting.
You can also specify more complicated structures by creating a key that maps to another map, rather than a string, as in:
************************************************
---
apiVersion: v1
kind: Pod
metadata:
  name: rss-site
  labels:
    app: web
************************************************

In this case, we have a key, metadata, that has as its value a map with 2 more keys, name and labels. 
The labels key itself has a map as its value. You can nest these as far as you want to.

The YAML processor knows how all of these pieces relate to each other because we’ve indented the lines. 
In this example I’ve used 2 spaces for readability, but the number of spaces doesn’t matter — as long as it’s at least 1, and as long as you’re CONSISTENT.  
For example, name and labels are at the same indentation level, so the processor knows they’re both part of the same map. 
It knows that app is a value for labels because it’s indented further.

Quick note: NEVER use tabs in a YAML file.

So, if we were to translate this to JSON, it would look like this:
************************************************
{
  "apiVersion": "v1",
  "kind": "Pod",
  "metadata": {
               "name": "rss-site",
               "labels": {
                          "app": "web"
                         }
              }
}
************************************************
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

YAML lists
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
YAML lists are literally a sequence of objects.  For example:
args
  - sleep
  - "1000"
  - message
  - "Bring back Firefly!"
As shown abve, you can have virtually any number of items in a list, which is defined as items that start with a dash (-) indented from the parent.  
So in JSON, this would be:
************************************************
{
   "args": ["sleep", "1000", "message", "Bring back Firefly!"]
}
************************************************
And of course, members of the list can also be maps:
************************************************
---
apiVersion: v1
kind: Pod
metadata:
  name: rss-site
  labels:
    app: web
spec:
  containers:
    - name: front-end
      image: nginx
      ports:
        - containerPort: 80
    - name: rss-reader
      image: nickchase/rss-php-nginx:v1
      ports:
        - containerPort: 88
************************************************
So as shown above, we have a list of containers “objects”, each of which consists of a name, an image, and a list of ports.  
Each list item under ports is itself a map that lists the containerPort and its value. For completeness, let’s quickly look at the JSON equivalent:
************************************************
{
   "apiVersion": "v1",
   "kind": "Pod",
   "metadata": {
                 "name": "rss-site",
                 "labels": {
                             "app": "web"
                           }
               },
    "spec": {
       "containers": [{
                       "name": "front-end",
                       "image": "nginx",
                       "ports": [{
                                  "containerPort": "80"
                                 }]
                      }, 
                      {
                       "name": "rss-reader",
                       "image": "nickchase/rss-php-nginx:v1",
                       "ports": [{
                                  "containerPort": "88"
                                 }]
                      }]
            }
}
************************************************
As you can see, we’re starting to get pretty complex, and we haven’t even gotten into anything particularly complicated ! 
No wonder YAML is replacing JSON so fast. So let’s review.  We have:
* maps - which are groups of name-value pairs
* lists - which are individual items
* maps of maps
* maps of lists
* lists of lists
* lists of maps
Basically, whatever structure you want to put together, you can do it with those two structures.  

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Creating a Pod using YAML :
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
We’re going to first create a Pod, then a Deployment, using YAML. Creating the pod file :
In our previous example, we described a simple Pod using YAML.
Call it pod.yaml and add the following text :
************************************************
—
apiVersion: v1
kind: Pod
metadata:
 name: rss-site
 labels:
   app: web
spec:
 containers:
   – name: front-end
     image: nginx
     ports:
       – containerPort: 80
   – name: rss-reader
     image: nickchase/rss-php-nginx:v1
     ports:
       – containerPort: 88
************************************************
Taking it apart one piece at a time, we start with the API version; here it’s just v1. 
(When we get to deployments, we’ll have to specify a different version because Deployments don’t exist in v1.)

Next, we’re saying that we want to create a "Pod". We can specify "Deployment", "Job", "Service", and so on, depending on what we’re trying to achieve.
Next, we specify the metadata. Here we’re specifying the name of the Pod, as well as the label we’ll use to identify the pod to Kubernetes.

Finally, we’ll specify the actual objects that make up the pod. 
The spec property includes any containers, storage volumes, or other pieces that Kubernetes needs to know about.
Also, properties such as whether to restart the container if it fails. 
You can find a complete list of Kubernetes Pod properties in the Kubernetes API specification, but let’s take a closer look at a typical container definition:

In above code for "spec:" part we see that, we have an easy definition: a name (front-end), the image on which it’s based (nginx), 
and one port on which the container will listen internally (80). Of these, only the name is really required.
But in general, if you want it to do anything useful, you’ll need more information.

You can specify complex properties, like a command to run when container starts, arguments it should use, a working directory.
Or you can specify whether to pull a new copy of the image every time it’s instantiated.
You can also specify even deeper information, such as the location of the container’s exit log.  Here are the properties you can set for a Container:
* name
* image
* command
* args
* workingDir
* ports
* env
* resources
* volumeMounts
* livenessProbe
* readinessProbe
* livecycle
* terminationMessagePath
* imagePullPolicy
* securityContext
* stdin
* stdinOnce
* tty

After creating pod.yaml, run the below commands :

Save the file, and tell Kubernetes to create its contents:
->    kubectl create -f pod.yaml
o/p : pod "rss-site" created
As you can see, K8s references the name we gave the Pod.  You can see that if you ask for a list of the pods:

->	  kubectl get pods
o/p : NAME       READY     STATUS              RESTARTS   AGE
	  rss-site   0/2       ContainerCreating   0          6s

If you check early enough, you can see that the pod is still being created.  After a few seconds, you should see the containers running:

->	  kubectl get pods
o/p : NAME       READY     STATUS    RESTARTS   AGE
	  rss-site   2/2       Running   0          14s
	  
From here, you can test out the Pod (just as we did in the previous article), but ultimately we want to create a Deployment.
So let’s go ahead and delete it so there aren’t any name conflicts:

->	  kubectl delete pod rss-site
o/p : pod "rss-site" deleted

Troubleshooting pod creation
----------------------------
Sometimes, of course, things don’t go as you expect. Maybe you’ve got a networking issue, or you’ve mistyped something in your YAML file.  
You might see an error like this:

->	  kubectl get pods
o/p : NAME       READY     STATUS         RESTARTS   AGE
	  rss-site   1/2       ErrImagePull   0          9s

In this case, we can see that one of our containers started up just fine, but there was a problem with the other.  
To track down the problem, we can ask Kubernetes for more information on the Pod:

->	  kubectl describe pod rss-site
o/p : Name:           rss-site
	  Namespace:      default
	  Node:           10.0.10.7/10.0.10.7
	  Start Time:     Sun, 08 Jan 2017 08:36:47 +0000
	  Labels:         app=web
	  Status:         Pending
	  IP:             10.200.18.2
	  Controllers:    <none>
	  Containers:
  	 	front-end:
    	  Container ID:               docker://a42edaa6dfbfdf161f3df5bc6af05e740b97fd9ac3d35317a6dcda77b0310759
    	  Image:                      nginx
    	  Image ID:                   docker://sha256:01f818af747d88b4ebca7cdabd0c581e406e0e790be72678d257735fad84a15f
    	  Port:                       80/TCP
    	  State:                      Running
			Started:                  Sun, 08 Jan 2017 08:36:49 +0000
    	  Ready:                      True
		rss-reader:
    	  Container ID:
    	  Image:                      nickchase/rss-php-nginx
    	  Image ID:
    	  Port:                       88/TCP
    	  State:                      Waiting
		    Reason:                   ErrImagePull
    	  Ready:                      False
		  .
		  .
	Events:
 
From here I was able to quickly see that I’d forgotten to add the :v1 tag to my image, so it was looking for the :latest tag, which didn’t exist.  
To fix the problem, I first deleted the Pod, then fixed the YAML file and started again. 
Instead, I could have fixed the repo so that Kubernetes could find what it was looking for, and it would have continued on as though nothing had happened.
Now that we’ve successfully gotten a Pod running, let’s look at doing the same for a Deployment.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Creating a Deployment using YAML :
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finally, we’re down to creating the actual Deployment.  Before we do that, though, it’s worth understanding what it is we’re actually doing.
K8s, remember, manages container-based resources. In the case of a Deployment, you’re creating a set of resources to be managed. 

Example, where we created a single instance of the Pod in the previous example, we might create a Deployment to tell Kubernetes to manage a set of replicas 
of that Pod — literally, a ReplicaSet — to make sure that a certain number of them are always available. So we might start our Deployment definition like this:
************************************************
---
 apiVersion: extensions/v1beta1
 kind: Deployment
 metadata:
   name: rss-site
 spec:
   replicas: 2
************************************************
Here we’re specifying the apiVersion as extensions/v1beta1 — remember, Deployments aren’t in v1, as Pods were — and that we want a Deployment. 
Next we specify the name. We can also specify any other metadata we want, but let’s keep things simple for now.

Finally, we get into the spec. In the Pod spec, we gave information about what actually went into the Pod; we’ll do the same thing here with the Deployment. 
We’ll start, in this case, by saying that whatever Pods we deploy, we always want to have 2 replicas. 

You can set this number as you like, and can set properties such as the selector that defines the Pods affected by this Deployment, 
or the minimum number of seconds a pod must be up without any errors before it’s considered “ready”.  
You can find a full list of the Deployment specification properties in the Kuberenetes v1beta1 API reference.

OK, so now that we know we want 2 replicas, we need to answer the question: “Replicas of what?”  They’re defined by templates:
************************************************
---
 apiVersion: extensions/v1beta1
 kind: Deployment
 metadata:
   name: rss-site
 spec:
   replicas: 2
   template:
     metadata:
       labels:
         app: web
     spec:
       containers:
         - name: front-end
           image: nginx
           ports:
             - containerPort: 80
         - name: rss-reader
           image: nickchase/rss-php-nginx:v1
           ports:
             - containerPort: 88
************************************************			 
---
 apiVersion: apps/v1beta1
 kind: Deployment
 metadata:
   name: ngix-deployment
 spec:
   replicas: 3
   template:
     metadata:
       labels:
         app: nginx
     spec:
       containers:
         - name: nginx
           image: nginx:1.7.9
           ports:
             - containerPort: 80
************************************************
Look familiar?  It should; it’s virtually identical to the Pod definition in the previous section, and that’s by design. 
Templates are simply definitions of objects to be replicated — objects that might, in other circumstances, by created on their own.
Now let’s go ahead and create the deployment.  Add the YAML to a file called deployment.yaml and point Kubernetes at it:

-> 	  kubectl create -f deployment.yaml
o/p : deployment "rss-site" created
To see how it’s doing, we can check on the deployments list:

-> 	  kubectl get deployments
o/p : NAME       DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
	  rss-site   2         2         2            1           7s
As you can see, Kubernetes has started both replicas, but only one is available. You can check the event log by describing the Deployment, as before:

->	  kubectl describe deployment rss-site
o/p : Name:                   rss-site
	  Namespace:              default
	  CreationTimestamp:      Mon, 09 Jan 2017 17:42:14 +0000=
	  Labels:                 app=web
	  Selector:               app=web
	  Replicas:               2 updated | 2 total | 1 available | 1 unavailable
	  StrategyType:           RollingUpdate
	  MinReadySeconds:        0
	  RollingUpdateStrategy:  1 max unavailable, 1 max surge
	  OldReplicaSets:         <none>
	  NewReplicaSet:          rss-site-4056856218 (2/2 replicas created)
	  Events:
  	    FirstSeen  LastSeen     Count   From                       SubobjectPath   Type          Reason   Message
		---------  --------     -----   ----                       -------------   --------      ------   -------
		46s        46s          1       {deployment-controller }   Normal      ScalingReplicaSet         Scaled up replica set rss-site-4056856218 to 2
		
As you can see here, there’s no problem, it just hasn’t finished scaling up yet. Another few seconds, and we can see that both Pods are running:

->	  kubectl get deployments
o/p : NAME       DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
	  rss-site   2         2         2            2           1m

OK, so let’s review. We’ve basically covered three topics:

1. YAML is a human-readable text-based format that let’s you easily specify configuration-type information by using a combination of maps of 
   name-value pairs and lists of items (and nested versions of each).
2. YAML is the most convenient way to work with Kubernetes objects, and in this article we looked at creating Pods and Deployments.
3. You can get more information on running (or should-be-running) objects by asking Kubernetes to describe them.

So that’s our basic YAML tutorial. 
We’re going to be tackling a great deal of Kubernetes-related content in the coming months, so if there’s something specific you want to hear about, 
let us know in the comments, or tweet us at @MirantisIT.

************************************************			 
---
 apiVersion: v1
 kind: Service
 metadata:
   name: helloworldservice
 spec:
   selector:
	  app: hello-world
	ports:
	  - protocol: "TCP"
	    port: 8080    	# Port accessible inside cluster
		targetPort: 80  # Port to forward to inside the pod
		nodePort: 30001 # Port accessible outside cluster
	type: LoadBalancer
			 
---
 apiVersion: extensions/v1beta1
 kind: Deployment
 metadata:
   name: hello-world
 spec:
   replicas: 5
   template:
     metadata:
       labels:
         app: hello-world
     spec:
       containers:
         - name: hello-world
           image: tutum/hello-world
           ports:
             - containerPort: 80
			 
*     kubectl create -f deployment.yml
o/p : service "helloworldservice" created
	  deployment "hello-world" created
	  
* 	  kubectl get pods
o/p : shows 5 running copis of hello-world running  [5 opds running]

* 	  kubectl get deployments
o/p : Name		   DESIRED	 	CURRENT	UP-TO-DATE	AVAILABLE	AGE
	  hello-world  5			5		5			5			20s
	  
************************************************
************************************************